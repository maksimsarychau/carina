/*******************************************************************************
 * Copyright 2013-2020 QaProSoft (http://www.qaprosoft.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.qaprosoft.carina.core.foundation.listeners;

import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.ITestContext;
import org.testng.ITestNGMethod;
import org.testng.ITestResult;

import com.qaprosoft.carina.core.foundation.commons.SpecialKeywords;
import com.qaprosoft.carina.core.foundation.utils.Configuration;
import com.zebrunner.agent.testng.listener.RunContextService;

public class TestNamingService {
    private static final Logger LOGGER = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass()); 
    
    static final ThreadLocal<String> testName = new ThreadLocal<String>();
    private static final ConcurrentHashMap<String, AtomicInteger> testNameInvCounter = new ConcurrentHashMap<>();

    /**
     * Get full test name based on test class, method and other generic information. It is generated by TestNameListener automatically.
     * 
     * @return String test name
     */
    @Deprecated
    public static String getTestName() {
        // TODO: think about returning very simple valid name if nothing was specified yet! Need ITestResult arg for that!
        if (testName.get() == null) {
            throw new RuntimeException("Unable to detect full test name yet!");
        }
        return testName.get();
    }
    
    /**
     * Get full test name based on test class, method and other generic information. It is generated by TestNameListener automatically.
     * 
     * @param result ITestResult
     * @return String test name
     */    
    public static String getTestName(ITestResult result) {
        // do not return name by thread because it is external Zafira call which should override all values
        setTestName(result);
        return testName.get();
    }
    
    /**
     * Set any custom full test name.
     * 
     * @param name String
     * @return String test name
     */ 
    public static String setTestName(String name) {
        LOGGER.warn("Overridden testName: " + name);
        testName.set(name);
        return testName.get();
    }

    
    /**
     * Set full test name based on test class, method and other generic information. It is generated based by ITestResult object.
     * 
     * @param ITestResult result
     * @return String test name
     */     
    @SuppressWarnings("unlikely-arg-type")
    private static String setTestName(ITestResult result) {
        String name = "";

        if (result.getTestContext() == null) {
            throw new RuntimeException("Unable to set Test name without testContext!");
        }
        @SuppressWarnings("unchecked")
        Map<Object[], String> testnameMap = (Map<Object[], String>) result.getTestContext().getAttribute(SpecialKeywords.TEST_NAME_ARGS_MAP);

        if (testnameMap != null) {
            String testHash = String.valueOf(Arrays.hashCode(result.getParameters()));
            if (testnameMap.containsKey(testHash)) {
                name = testnameMap.get(testHash);
            }
        }

        if (name.isEmpty()) {
            name = result.getTestContext().getCurrentXmlTest().getName();
        }

        // TODO: find the bext way to calculate TUID/hash
        if (result.getTestContext().getCurrentXmlTest().getAllParameters().containsKey(SpecialKeywords.EXCEL_DS_CUSTOM_PROVIDER) ||
                result.getTestContext().getCurrentXmlTest().getAllParameters().containsKey(SpecialKeywords.DS_CUSTOM_PROVIDER)) {
            // AUTO-274 "Pass"ing status set on emailable report when a test step fails
            String methodUID = "";
            for (int i = 0; i < result.getParameters().length; i++) {
                if (result.getParameters()[i] != null) {
                    if (result.getParameters()[i].toString().contains(SpecialKeywords.TUID + ":")) {
                        methodUID = result.getParameters()[i].toString().replace(SpecialKeywords.TUID + ":", "");
                        break; // first TUID: parameter is used
                    }
                }
            }
            if (!methodUID.isEmpty()) {
                name = methodUID + " - " + name;
            }
        }

        name = name + " - " + getMethodName(result);
        LOGGER.debug("testName: " + name);

        // introduce invocation count calculation here as in multi threading mode TestNG doesn't provide valid
        // getInvocationCount() value
        name = appendDataProviderLine(result, name);
        name = appendInvocationCount(result, name);
        
        testName.set(name);
        return testName.get();
    }
    
    /**
     * get Test Method name
     * 
     * @param result ITestResult
     * @return String method name
     */
    public static String getMethodName(ITestResult result) {
        // adjust testName using pattern
        ITestNGMethod m = result.getMethod();
        String name = Configuration.get(Configuration.Parameter.TEST_NAMING_PATTERN);
        name = name.replace(SpecialKeywords.METHOD_NAME, m.getMethodName());
        name = name.replace(SpecialKeywords.METHOD_PRIORITY, String.valueOf(m.getPriority()));
        name = name.replace(SpecialKeywords.METHOD_THREAD_POOL_SIZE, String.valueOf(m.getThreadPoolSize()));

        if (m.getDescription() != null) {
            name = name.replace(SpecialKeywords.METHOD_DESCRIPTION, m.getDescription());
        } else {
            name = name.replace(SpecialKeywords.METHOD_DESCRIPTION, "");
        }

        return name;
    }
    
    /**
     * get Test Package name
     * 
     * @param result ITestResult
     * @return String package name
     */
    public static String getPackageName(ITestResult result) {
        return result.getMethod().getRealClass().getPackage().getName();
    }
    
    /**
     * calculate InvocationCount number based on test name
     * 
     * @param String test
     * @return int invCount
     */
    private static String appendInvocationCount(ITestResult testResult, String testName) {
        int expectedInvocationCount = getInvocationCount(testResult);
        if (expectedInvocationCount > 1) {
            // adding extra zero at the beginning of the invocation count
            int indexMaxLength = Integer.toString(expectedInvocationCount).length() + 1;
            String lineFormat = " [InvCount=%0" + indexMaxLength + "d]";
            int currentInvocationCount = testNameInvCounter.computeIfAbsent(testName, $ -> new AtomicInteger(0))
                                                             .incrementAndGet();
            testName += String.format(lineFormat, currentInvocationCount);
        }
        return testName;
    }
    private static int getInvocationCount(ITestResult testResult) {
        ITestNGMethod[] methods = testResult.getTestContext().getAllTestMethods();
        return Arrays.stream(methods)
                     .filter(method -> method.equals(testResult.getMethod()))
                     .findFirst()
                     .map(ITestNGMethod::getInvocationCount)
                     .orElse(0);
    }
    
    private static String appendDataProviderLine(ITestResult testResult, String testName) {
        ITestNGMethod testMethod = testResult.getMethod();
        ITestContext testContext = testResult.getTestContext();
        Object[] parameters = testResult.getParameters();

        int dataProviderSize = RunContextService.getDataProviderSize(testMethod, testContext);
        if (dataProviderSize > 0) {
            // adding extra zero at the beginning of the data provider line number
            int indexMaxLength = Integer.toString(dataProviderSize).length() + 1;
            String lineFormat = " [L%0" + indexMaxLength + "d]";
            int index = RunContextService.getCurrentDataProviderIndex(testMethod, testContext, parameters) + 1;
            testName += String.format(lineFormat, index);
        }
        return testName;
    }
    
}
